./node_modules/@types/nodemailer/lib/mailer/index.d.ts:    transporter: Transport<T>;
./node_modules/@types/nodemailer/lib/mailer/index.d.ts:    /** Usage: typeof transporter.MailMessage */
./node_modules/@types/nodemailer/lib/mailer/index.d.ts:    constructor(transporter: Transport<T>, options?: TransportOptions, defaults?: DefaultTransportOptions);
./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js:     * @param transporter The transporter to use for the refresh request.
./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js:    constructor(url, transporter, clientAuthentication) {
./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js:        this.transporter = transporter;
./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js:            const response = await this.transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js:            new ExternalAccountAuthorizedUserHandler((_a = options.token_url) !== null && _a !== void 0 ? _a : DEFAULT_TOKEN_URL.replace('{universeDomain}', this.universeDomain), this.transporter, clientAuth);
./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js:            response = await this.transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/downscopedclient.d.ts:import { BodyResponseCallback } from '../transporters';
./node_modules/google-auth-library/build/src/auth/downscopedclient.js:            response = await this.transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/jwtclient.js:            transporter: this.transporter,
./node_modules/google-auth-library/build/src/auth/jwtclient.js:                transporter: this.transporter,
./node_modules/google-auth-library/build/src/auth/refreshclient.js:        const res = await this.transporter.request({
./node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.d.ts:import { BodyResponseCallback } from '../transporters';
./node_modules/google-auth-library/build/src/auth/baseexternalclient.js:            transporter: this.transporter,
./node_modules/google-auth-library/build/src/auth/baseexternalclient.js:            const response = await this.transporter.request({
./node_modules/google-auth-library/build/src/auth/baseexternalclient.js:            response = await this.transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/baseexternalclient.js:        const response = await this.transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js:                await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, "m", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js:        const response = await context.transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js:                await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, "m", _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken).call(this, context.transporter);
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js:        const roleName = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, "m", _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName).call(this, metadataHeaders, context.transporter);
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js:        const awsCreds = await __classPrivateFieldGet(this, _DefaultAwsSecurityCredentialsSupplier_instances, "m", _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials).call(this, roleName, metadataHeaders, context.transporter);
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js: * @param transporter The transporter to use for requests.
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js:async function _DefaultAwsSecurityCredentialsSupplier_getImdsV2SessionToken(transporter) {
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js:    const response = await transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js: * @param transporter The transporter to use for requests.
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js:async function _DefaultAwsSecurityCredentialsSupplier_getAwsRoleName(headers, transporter) {
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js:    const response = await transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js: * @param transporter The transporter to use for requests.
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js:async function _DefaultAwsSecurityCredentialsSupplier_retrieveAwsSecurityCredentials(roleName, headers, transporter) {
./node_modules/google-auth-library/build/src/auth/defaultawssecuritycredentialssupplier.js:    const response = await transporter.request({
./node_modules/google-auth-library/build/src/auth/stscredentials.d.ts:    private transporter;
./node_modules/google-auth-library/build/src/auth/oauth2common.d.ts:     * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}
./node_modules/google-auth-library/build/src/auth/oauth2client.js:        const res = await this.transporter.request({
./node_modules/google-auth-library/build/src/auth/oauth2client.js:            res = await this.transporter.request({
./node_modules/google-auth-library/build/src/auth/oauth2client.js:            this.transporter
./node_modules/google-auth-library/build/src/auth/oauth2client.js:            return this.transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/oauth2client.js:            r2 = await this.transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/oauth2client.js:        const { data } = await this.transporter.request({
./node_modules/google-auth-library/build/src/auth/oauth2client.js:            res = await this.transporter.request({
./node_modules/google-auth-library/build/src/auth/oauth2client.js:            res = await this.transporter.request({
./node_modules/google-auth-library/build/src/auth/passthrough.d.ts:     * {@link AuthClient.transporter} for any desired request overrides/handling.
./node_modules/google-auth-library/build/src/auth/baseexternalclient.d.ts:import { BodyResponseCallback, Transporter } from '../transporters';
./node_modules/google-auth-library/build/src/auth/baseexternalclient.d.ts:    transporter: Transporter | Gaxios;
./node_modules/google-auth-library/build/src/auth/passthrough.js:     * {@link AuthClient.transporter} for any desired request overrides/handling.
./node_modules/google-auth-library/build/src/auth/passthrough.js:        return this.transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/googleauth.d.ts:import { DefaultTransporter, Transporter } from '../transporters';
./node_modules/google-auth-library/build/src/auth/googleauth.d.ts:    transporter?: Transporter;
./node_modules/google-auth-library/build/src/auth/googleauth.js:const transporters_1 = require("../transporters");
./node_modules/google-auth-library/build/src/auth/googleauth.js:GoogleAuth.DefaultTransporter = transporters_1.DefaultTransporter;
./node_modules/google-auth-library/build/src/auth/authclient.js:const transporters_1 = require("../transporters");
./node_modules/google-auth-library/build/src/auth/authclient.js:        this.transporter = (_d = opts.transporter) !== null && _d !== void 0 ? _d : new transporters_1.DefaultTransporter();
./node_modules/google-auth-library/build/src/auth/authclient.js:        if (opts.transporterOptions) {
./node_modules/google-auth-library/build/src/auth/authclient.js:            this.transporter.defaults = opts.transporterOptions;
./node_modules/google-auth-library/build/src/auth/authclient.js:     * Return the {@link Gaxios `Gaxios`} instance from the {@link AuthClient.transporter}.
./node_modules/google-auth-library/build/src/auth/authclient.js:        if (this.transporter instanceof gaxios_1.Gaxios) {
./node_modules/google-auth-library/build/src/auth/authclient.js:            return this.transporter;
./node_modules/google-auth-library/build/src/auth/authclient.js:        else if (this.transporter instanceof transporters_1.DefaultTransporter) {
./node_modules/google-auth-library/build/src/auth/authclient.js:            return this.transporter.instance;
./node_modules/google-auth-library/build/src/auth/authclient.js:        else if ('instance' in this.transporter &&
./node_modules/google-auth-library/build/src/auth/authclient.js:            this.transporter.instance instanceof gaxios_1.Gaxios) {
./node_modules/google-auth-library/build/src/auth/authclient.js:            return this.transporter.instance;
./node_modules/google-auth-library/build/src/auth/authclient.js:     * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}
./node_modules/google-auth-library/build/src/auth/oauth2common.js:     * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}
./node_modules/google-auth-library/build/src/auth/stscredentials.js:const transporters_1 = require("../transporters");
./node_modules/google-auth-library/build/src/auth/stscredentials.js:        this.transporter = new transporters_1.DefaultTransporter();
./node_modules/google-auth-library/build/src/auth/stscredentials.js:            const response = await this.transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/oauth2client.d.ts:import { BodyResponseCallback } from '../transporters';
./node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js:            const response = await context.transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/urlsubjecttokensupplier.js:            const response = await context.transporter.request(opts);
./node_modules/google-auth-library/build/src/auth/authclient.d.ts:import { Transporter } from '../transporters';
./node_modules/google-auth-library/build/src/auth/authclient.d.ts:    transporter?: Gaxios | Transporter;
./node_modules/google-auth-library/build/src/auth/authclient.d.ts:     * Provides default options to the transporter, such as {@link GaxiosOptions.agent `agent`} or
./node_modules/google-auth-library/build/src/auth/authclient.d.ts:    transporterOptions?: GaxiosOptions;
./node_modules/google-auth-library/build/src/auth/authclient.d.ts:    transporter: Transporter;
./node_modules/google-auth-library/build/src/auth/authclient.d.ts:     * Return the {@link Gaxios `Gaxios`} instance from the {@link AuthClient.transporter}.
./node_modules/google-auth-library/build/src/auth/authclient.d.ts:     * This is not a part of the default {@link AuthClient.transporter transporter/gaxios}
./node_modules/google-auth-library/build/src/index.js:var transporters_1 = require("./transporters");
./node_modules/google-auth-library/build/src/index.js:Object.defineProperty(exports, "DefaultTransporter", { enumerable: true, get: function () { return transporters_1.DefaultTransporter; } });
./node_modules/google-auth-library/build/src/index.d.ts:export { DefaultTransporter } from './transporters';
./node_modules/google-auth-library/build/src/transporters.js:            // set transporter user agent if not in browser
./node_modules/firebase-admin/lib/app/credential-internal.js:                transporterOptions: {
./node_modules/firebase-admin/lib/app/credential-internal.js:            transporterOptions: {
./node_modules/gtoken/build/src/index.js:        this.transporter = {
./node_modules/gtoken/build/src/index.js:    await this.transporter.request({
./node_modules/gtoken/build/src/index.js:    if (options.transporter) {
./node_modules/gtoken/build/src/index.js:        this.transporter = options.transporter;
./node_modules/gtoken/build/src/index.js:        const r = await this.transporter.request({
./node_modules/gtoken/build/src/index.d.ts:    transporter?: Transporter;
./node_modules/gtoken/build/src/index.d.ts:    transporter: Transporter;
./node_modules/nodemailer/lib/mailer/index.js: * @param {Object} transporter Transport object instance to pass the mails to
./node_modules/nodemailer/lib/mailer/index.js:    constructor(transporter, options, defaults) {
./node_modules/nodemailer/lib/mailer/index.js:        this.transporter = transporter;
./node_modules/nodemailer/lib/mailer/index.js:        this.transporter.mailer = this;
./node_modules/nodemailer/lib/mailer/index.js:        // setup emit handlers for the transporter
./node_modules/nodemailer/lib/mailer/index.js:        if (typeof this.transporter.on === 'function') {
./node_modules/nodemailer/lib/mailer/index.js:            this.transporter.on('log', log => {
./node_modules/nodemailer/lib/mailer/index.js:            // transporter errors
./node_modules/nodemailer/lib/mailer/index.js:            this.transporter.on('error', err => {
./node_modules/nodemailer/lib/mailer/index.js:            this.transporter.on('idle', (...args) => {
./node_modules/nodemailer/lib/mailer/index.js:                if (typeof this.transporter[method] === 'function') {
./node_modules/nodemailer/lib/mailer/index.js:                        this.transporter.getSocket = this.getSocket;
./node_modules/nodemailer/lib/mailer/index.js:                    return this.transporter[method](...args);
./node_modules/nodemailer/lib/mailer/index.js:            this.transporter.getSocket = this.getSocket;
./node_modules/nodemailer/lib/mailer/index.js:                name: this.transporter.name,
./node_modules/nodemailer/lib/mailer/index.js:                version: this.transporter.version,
./node_modules/nodemailer/lib/mailer/index.js:            this.transporter.name,
./node_modules/nodemailer/lib/mailer/index.js:            this.transporter.version
./node_modules/nodemailer/lib/mailer/index.js:                this.transporter.send(mail, (...args) => {
./node_modules/nodemailer/lib/mailer/index.js:        return util.format('%s (%s; +%s; %s/%s)', packageData.name, packageData.version, packageData.homepage, this.transporter.name, this.transporter.version);
./node_modules/nodemailer/lib/mailer/mail-message.js:        // force specific keys from transporter options
./node_modules/nodemailer/lib/nodemailer.js:module.exports.createTransport = function (transporter, defaults) {
./node_modules/nodemailer/lib/nodemailer.js:        // provided transporter is a configuration object, not transporter plugin
./node_modules/nodemailer/lib/nodemailer.js:        (typeof transporter === 'object' && typeof transporter.send !== 'function') ||
./node_modules/nodemailer/lib/nodemailer.js:        // provided transporter looks like a connection url
./node_modules/nodemailer/lib/nodemailer.js:        (typeof transporter === 'string' && /^(smtps?|direct):/i.test(transporter))
./node_modules/nodemailer/lib/nodemailer.js:        if ((urlConfig = typeof transporter === 'string' ? transporter : transporter.url)) {
./node_modules/nodemailer/lib/nodemailer.js:            options = transporter;
./node_modules/nodemailer/lib/nodemailer.js:            transporter = new SMTPPool(options);
./node_modules/nodemailer/lib/nodemailer.js:            transporter = new SendmailTransport(options);
./node_modules/nodemailer/lib/nodemailer.js:            transporter = new StreamTransport(options);
./node_modules/nodemailer/lib/nodemailer.js:            transporter = new JSONTransport(options);
./node_modules/nodemailer/lib/nodemailer.js:            transporter = new SESTransport(options);
./node_modules/nodemailer/lib/nodemailer.js:            transporter = new SMTPTransport(options);
./node_modules/nodemailer/lib/nodemailer.js:    mailer = new Mailer(transporter, options, defaults);
./functions/lib/invites.js:// Initialize nodemailer transporter.
./functions/src/invites.ts:// Initialize nodemailer transporter.
./src/inviteEmail.ts:// Create a reusable transporter object
./src/inviteEmail.ts:const transporter = nodemailer.createTransport({
./src/inviteEmail.ts:      const info = await transporter.sendMail({
